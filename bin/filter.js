// Generated by CoffeeScript 1.4.0
var Sylvester,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Sylvester = require('Sylvester');

exports.Filter = (function() {
  'Kalman Filter';

  var F, H, I, P, R, data, u, x;

  function Filter() {
    this.apply = __bind(this.apply, this);

    this.update = __bind(this.update, this);

  }

  data = {
    position: {
      x: 0,
      y: 0,
      z: 0
    },
    velocity: {
      x: 0,
      y: 0,
      z: 0
    }
  };

  x = $M([[0], [0]]);

  P = $M([[1000, 0], [0, 1000]]);

  u = $M([[0], [0]]);

  F = $M([[1, 1], [0, 1]]);

  H = $M([[1, 0]]);

  R = $M([[1]]);

  I = $M([[1, 0], [0, 1]]);

  'Takes in navdata from event listener and applies';


  Filter.prototype.update = function(navdata) {
    var measurements;
    console.log(navdata);
    measurements = {
      position: [x, y, z],
      velocity: [vx, vy, vz]
    };
    return apply(measurements['position'], measurements['velocity']);
  };

  'Applies the kalman filter to passed nav data';


  Filter.prototype.apply = function(position, velocity) {
    var K, S, Z, i, measurement, measurements, y, _i, _len, _results;
    measurements = [position, velocity];
    _results = [];
    for (i = _i = 0, _len = measurements.length; _i < _len; i = ++_i) {
      measurement = measurements[i];
      Z = $M([[measurement]]);
      y = Z.subtract(H.x(x));
      S = H.x(P).x(H.transpose()).plus(R);
      K = P.x(H.transpose()).x(S.inv);
      x = x.plus(K.x(y));
      P = I.minus(K.x(H)).x(P);
      x = F.x(x).plus(u);
      P = F.times(P).times(F.transpose());
      console.log("Matrix x #" + (i + 1) + ":");
      console.log(x.inspect());
      console.log("Matrix P #" + (i + 1) + ":");
      _results.push(console.log(P.inspect()));
    }
    return _results;
  };

  return Filter;

})();
